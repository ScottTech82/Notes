
In reading module 1, 2, & 3 can be read but are MVC which is a little different.  
You write the entire back end in C#.

MVC = Models, Views, Controllers.  we have done Models & Controllers
    Order or Customer clss and Controller with methods.
    console.writeline is the view portion.

WebAPI has models and controllers, but views are done differently.
    WebAPI passes the view (json) to another application. Does not display itself.
    ie. Angular.  Angular then handles the view portion or displaying to user.

    request is caller to server
    server receives the request and gets the file page, sends it back to the caller
    called the response.

    MVC will make a request from browser to the server, get the homepage send back to browser/user.
        as soon as you click a button, drop down list, etc. its another request back out to internet/server.
        problem is you lose control where it gets routed and speed, could go up through canada and slow down.
        Will get slow making the requests and only runs a browser.  
        Most applications are built for laptop or bigger and MVC does not handle that well.

    WebAPI has the same Models (classes mapped to database) and Controllers -clsses with methds 
        are the same.  But Views are different.
    
Remember some of these differences!!!
        ASP.NET core Web API
            Authentication = None
            Only have checkd Use Controller

Uncheck -->  Configure HTTPS leave checkd if in production. 
              -just messing around for bootcamp uncheck the box.
            Enable Docker - create app for one environment and run in another. ie. build on Mac, run on Windows. 
                                        -docker allows linux version of sql server run in the docker on a MAC, so you can get sql server.
            Use Controllers -leave checked.
            Enable OpenAPI Support -Uncheck.


appsettings.json = connection string will go in here, so it doesnt go into the Code.

program.cs -dont delete or change any of the methods showing that make the application run.

weatherforecast.cs is the class with the properties that contains the data.
controller has the methods and some information.

Removed Browser to auto open
    right click the webapiTutorial -> properties -> Debug ->WebAPITutorial scroll to bottom.
            App URL you can change the local host numbers. Not the first 1, but the other 4.
            http://localhost:5555

set the connection string 
    appsettings.json and after 
                        "AllowedHosts": "*",
                        "ConnectionStrings": {
                        "Dev": "server=localhost\\sqlexpress01;database=SalesDbApi;trusted_connection=true;"
   
      -You can have as many as you want with different KEY. ie. above key is "Dev":

Install Packages

Models Folder
    
    AppDbContext class and add only the one constructor
                public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }
                
                protected override void OnModelCreating(ModelBuilder modelBuilder) { }
       
                only ones needed, different from C#.

    start putting in Models classes -we did Customer and added properties/column names.

UNIQUE Property in Model Class
            //we did customer code as unique property.
        [Index("Code", IsUnique = true, Name = "UIDX_Code")]
            public class Customer
            {


***IMPORTANT CONFIGURING***
<check WebAPITutorial project>

        critical we get this right to configure it correctly.

                    //***configuring sql server after AddControllers but before builder.Build***
                builder.Services.AddDbContext<AppDbContext>(x =>
                {
                    x.UseSqlServer(builder.Configuration.GetConnectionString("Dev"));
                });
                builder.Services.AddCors(); //cross origin resource services, cors.

            This currently limits who can access.  Saying nothing outside the domain is allowed to access the server.
            but going to configure to allow anyone which you do not want to do.
            Adding cor support and will configure.

            after var app = builder.Build();
                      //***added the below - not what you want to actually do in production.
                app.UseCors(x =>
                {
                    x.AllowAnyOrigin()  //chaining together
                    .AllowAnyHeader()
                    .AllowAnyMethod();
                });
            before app.UseAuthorization

            Headers could be keys or tokens.  You need to login and get a token, then pass that token to access the server
                this is like EveOnline app api that allowed certain access with a token.
            we are currently allowing everything, would normally want to restrict.

                after app.MapControllers();
                        //optional -statements to auto update database.
                        //web hosting might restrict access to update sql database from home.
                        //creating a scope to use in the next line. Applying migration that has not been applied already.
                        using var scope = app.Services
                                            .GetRequiredService<IServiceScopeFactory>()
                                            .CreateScope();
                        scope.ServiceProvider
                                    .GetService<AppDbContext>()!
                                    .Database.Migrate();

                before app.Run();


Now do migration and update database.

Create Controller with a better way!!!

    right click controllers folder new -controller. select the class & AppDbContext Options
    it auto creates.

    [HttpGet]  allows the below to happen.
You can go to browser type localhost:5555/api/customers
    and it will get all customers.


CONNECTION keys 
        put one key in the program.cs GetConnectionString, ie. "Dev"
            until one migration and update database.
    then you can change it, like moving it to the cloud with a different connection string.
    
set it do auto change the connection key depending on if you are in debug or release mode.
using the hash key to change the connection key if configuration is set to Debug.

#if DEBUG   
    ConnectionKey = "Dev";
#endif

RELEASE instead of Debug in visual studio.
    Ready to deploy something you run it in RELEASE mode.
    if you set to release and try to debug it will give an error.

                 builder.Services.AddDbContext<AppDbContext>(x =>
                {
                    string ConnectionKey = "Dev";
            #if RELEASE
                ConnectionKey = "Prod";
            #endif
                    x.UseSqlServer(builder.Configuration.GetConnectionString(ConnectionKey));
                });
                    builder.Services.AddCors();

CAPTSTONE will be pushed up to the Cloud for a year with Free Hosting.
        so we will need to change the key to production.

In Controller;

# HTTP methods
    -GET  =reading from the database or Retrieving.
    -POST  =Method that does Add or INSERT.
    -PUT  =Method that does UPDATE
    -DELETE 

HTTP is only for updates done outside of application.
    [HttpGet] above the Get Method means you can access from outside application.
    if you are doing private Methods, not needed.


    two things point to which method you want, the HTTP you are using (ie, Get, Put, etc.) and URL.

    Dont start with a slash in the URL, it will skp the api/Customers or whatever controller.

    ActionResult 
        previously did IEnumerable<Customer>> now we cannot return Customer over the web.
        you could get an instance of customer, but the id set to 0 or negative and doesnt point correctly.
        convention only works if everyone who uses it knows it.  Which never happens.

    Action Result is a base class with derived classes underneath.
        ie. Not Found 

    400 errors are bad or not good. 
    500 is an issue with sql
    200 is generally good, like it worked.

    IActionResult
        If you are not going to return any data, you can use IActionResult instead of ActionResult.
        like in the update or delete method.
        we can return messages, but we are not returing DATA.

        If you want data returned you use ActionResult<table> the instance of the table data you are returning.


If you have {"Id"} as the URL path you need it in the parameter list of the method.
        ie. [HttpGet("Id")]  GetCustomer(int Id)  <----must be in here as well and exactly the same.
        you can have as many parameters as you want, they just have to be in the URL and match exactly.

POST & PUT  
    you have to pass an instance of your data into it.  ie PostCustomer(Customer customer); 
    instance goes into the cache and is updated then save changes.



TOOL to test Controllers
POSTMAN

    POST or Insert - copy an existing customer
    change to Post then Body, raw and json
    paste the customer and change id to 0.

    Duplicate tabs and put your methods on each one.  Get, GetbyID, Post, etc.





Only READ Operations -adding Virtual instance and including other table data

Caused Cyclical redundency - added [JsonIgnore] -only system one.
Get All Orders for a Customer

    update the Get customer by PK with Include and instead of FindAsync, SingleorDefault async.

            var customer = await _context.Customers
                                            .Include(x => x.Orders)
                                            .SingleOrDefaultAsync(x => x.Id == id);
--got error for cyclical redundency.  We have Orders as Virtual in Customers and Customers as virtual in Orders.
    cant do both.  We can get the customer when we read the order, or we can get all orders for the customer.
    he would give up the one giving all orders for a Customer.
    

    Added in Order  
        public virtual IEnumerable<OrderLine>? OrderLines { get; set; }

    Added in OrdersController
                (Display an order by Id, include the orderline, the product, and customer)
            var order = await _context.Orders
                                    .Include(x => x.OrderLines)!
                                    .ThenInclude(x => x.Product)
                                    .Include(x => x.Customer)
                                    .SingleOrDefaultAsync(x => x.Id == id);
    Orders Get ALL  
                [HttpGet]
                public async Task<ActionResult<IEnumerable<Order>>> GetOrders()
                {
                    return await _context.Orders
                                            .Include(x => x.Customer)
                                            .ToListAsync();



NOT sure if these are 100% correct.  
        My Own Methods worked on in ExpenseWebAPI project/solution.
    
       //added at the top, readonly Employee class with _empCtrl.
        private readonly AppDbContext _context;
        private readonly Employee? _empCtrl;

     // GET: /api/expenses/approved
        [HttpGet("approved")]
        public async Task<ActionResult<IEnumerable<Expense>>> GetApprovedExpenses(Expense expense)
        {
            var expApproved = await _context.Expenses.FindAsync(expense.Status);

            if (expApproved.Status == "APPROVED")
            {
                return await _context.Expenses.ToListAsync();
            }

            return NotFound();

        }

        // GET: /api/expenses/review
        [HttpGet("review")]
        public async Task<ActionResult<IEnumerable<Expense>>> GetExpensesInReview(Expense expense)
        {
            var expReview = await _context.Expenses.FindAsync(expense.Status);

            if (expReview.Status == "REVIEW")
            {
                return await _context.Expenses.ToListAsync();
            }

            return NotFound();

        }

        // PUT: /api/expenses/review/{id}
        [HttpPut("review/{id}")]
        public async Task ReviewExpense(int id, Expense expense)
        {
            if(expense.Total <= 75)
            {
                expense.Status = "APPROVED";
                _empCtrl.ExpensesDue += expense.Total;
               await _context.SaveChangesAsync();
            }
            expense.Status = "REVIEW";
            await _context.SaveChangesAsync();
        }

        // PUT: /api/expenses/approve/{id}
        [HttpPut("approve/{id}")]
        public async Task ApproveExpense(int id, Expense expense)
        {
            expense.Status = "APPROVED";
            _empCtrl.ExpensesDue += expense.Total;
            await _context.SaveChangesAsync();
        }

        // PUT: /api/expenses/reject/{id}
        [HttpPut("reject/{id}")]
        public async Task RejectExpense(int id, Expense expense)
        {
            expense.Status = "REJECTED";
            await _context.SaveChangesAsync();
        }

ExpenseLine Controller added Method

    private async Task<IActionResult> RecalculateExpenseTotal(int expenseId)
        {
            var expenseX = await _context.Expenses.FindAsync(expenseId);
            if(expenseX == null)
            {
                return NotFound();
            }

            expenseX.Total = (from el in _context.Expenselines
                       join i in _context.Items on el.ItemId equals i.Id
                       where el.ExpenseId == expenseId
                       select new { LineTotal = el.Quantity * i.Price }).Sum(e => e.LineTotal);

            return await _expCtrl.PutExpense(expenseId, expenseX);
        }



============
Create repository but not put anything in it.
    up to the teams.

in general, suggestion.. get together as team or have 1.
    create the visual studio project to get started.
    create project/solution
    put in the packages. install-
    setup the ConnectionStrings
    push to repository.
    -other members will clone the repository to have it on their machines.

    Then we can do different things;
    -someone has to create the Model folder
    -one gets rid of the weather stuff
    -someone can work on the program.cs
    -etc.

    When you make changes, always do your work in a branch.
    DONT use the main branch.
        -push your branch up to the repository when its done.
        -each of us will take a look at the repo to be merged.
        -do a pull request and what you did in your branch, review things as a team.
        -all review the changes and all agree on the merge.

    Once done everyone will have to repull the main branch since it will have been updated.

    -other two team members will then have to merge the main branch into their dev branch.


    Once basics are done.. nuget.. program.cs.. connectionstrings.. got rid of weather.
    Then start adding Models and adding Controllers.

    Test your branch.  Push it up.. do pull request.  Get together to do the main merge.
    all say ok fine and merge to main, then pull it down and merge to our dev.

    PK's need to be done first before you can do FK tables.









MICROSERVICES    (minimal API's)
        have one website call another

    capstone is not a microservice.

    Tends to be an API -except much more focused and fewer of them, small implementation.
    A couple of math functions to write API's for that we may use in many different applications.

    maybe write an API just for user management
        write it once and the other applications will share that API.


    use minimal API's -uncheck the Controllers.
    when creating -everything is unchecked. HTTPS might be checked in real world scenario.

    May need CORS if we are going to deploy it.


    ALWAYS create statements after the app variable is declared.


    above app.Run(); we are putting app.MapGet (could do put, post, etc.)
    app.MapGet("/cubed/{nbr:decimal}", () => {});

    then need to pass in our decimal type nbr variable to the random method created.

            app.MapGet("/cubed/{nbr:decimal}", (decimal nbr) =>
                {
                    return nbr * nbr * nbr;
                });

            web browser localhost:5555/cubed/3 
                it will calculate whatever number passed in.

Delagate 
    a way to declare a variable that is of type METHOD.
    declaring a delage is declaring a type of Method.

    since we dont have a controller with method and cant call it from the controller
    we are doing a delagte with () => {}

RESULTS
    if you want to return badrequest or some error you have to do 
        Results.BadRequest("can enter a comment");
    but then have to do the true portion at the end.
        Results.Ok(your calculation performed);



In Process
    when in production you could have an
    application pool, which is a pool of memory allocated solely to your application.

    you would have to run out of process.



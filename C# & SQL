Programming SQL in C#
            <see SQL in Csharp solution>
    shouldnt have to do this in the real world.
    its a lot of coding and there are better ways to do it.
    BUT might see it in the world with older programs, so we can understand it.

    CONNECTION string
        a connection is required to communicate with sql from C#
     Server/Instance (ie mylaptop/sqlexpress)
     Windows or SQL Auth
     Database (from Object Explorer)

        server=[server]{\\[instance]};
        database=[dbname];
        uid=[username];pwd=[password] OR trusted_connection=true;
            may or may not require this certificate "trustServerCertificate=true;"
    
    full string below -use semi colons to separate and @ at beginning or \\ to read correctly.
"server=localhost\\sqlexpress;database=ap;trusted_connection=true;trustServerCertificate=true;"


    Ask is this code im going to write be used by other projects?
    create a clss library and add reference.

    You then have to create a method to call the connection string.
    And a property in the library public SqlConnection connection {get; set;}


    TOOLS - NuGet Package Manager then - NuGetSolution
    browse for Microsoft.Data.SqlClient and click to add to the library, not the program/console app.
        
        now we can put public Microsoft.Data.SqlClient.SqlConnection connection {get; set;} 

Opening the connection with the below and testing the connection.

                                public class Connection
                                {
                                    //Hard coding is not best way, will change later
                                private string connectionString = @"server=localhost\sqlexpress01;database=Prs;trusted_connection=true;trustServerCertificate=true;";

                                    public SqlConnection connection { get; set; }

                                    public void Connect()
                                    {
                                        connection = new SqlConnection(connectionString);
                                        connection.Open();  //opening the connection

                                        //Testing the connection
                                        if(connection.State != System.Data.ConnectionState.Open)
                                        {throw new Exception("Could not make connection to database!");}

    Then after the connection is open, we need to close the connection when done.
    Connections are expensive resource wise.  You may need to limit the connections. And need to close
    when done.

    Made adjustments to the top code as well to check for connection being null and setting it back to null
    to close the connection. 
    This is the full library code for it;

                    namespace PrsLibrary
                    {
                        public class Connection
                        {
                            //Hard coding is not best way, will change later
                        private string connectionString = @"server=localhost\sqlexpress01;database=Prs;trusted_connection=true;trustServerCertificate=true;";

                            //adding property connection, to create a new instance and set to null to begin.
                            //used the Microsoft.Data.SqlClient package install to call the SqlConnection class, ? so it can be null and default null.
                            public SqlConnection? connection { get; set; } = null;

                            public void Connect()
                            {   //in our method, checking if connection is alraedy null, if yes opening a new connection.
                                //if not null, saying the connection already exists
                                if(connection is not null)
                                {
                                    System.Diagnostics.Debug.WriteLine("Connection already exists!");
                                    return;
                                }
                                connection = new SqlConnection(connectionString); //setting a new connection
                                connection.Open();  //opening the connection
                                
                                //Testing the connection.  If its anything other than .Open it didnt open properly.
                                if(connection.State != System.Data.ConnectionState.Open)
                                {  //if it does not open properly, throwing exception
                                    throw new Exception("Could not make connection to database!");
                                }
                                //This is written so you can see in Debug output that it opened successfully.
                                System.Diagnostics.Debug.WriteLine("Connection open successfully!");
                            }

                            //Closing the connection, do not want to keep it open, may be a limit.
                            public void Disconnect()
                            {
                                if(connection is not null) //putting is not null instead of != null.
                                {
                                    connection.Close(); //if the connection is not null, closing the connection.
                                    connection = null; //after its closed, setting connection back to null.
                                }

Close the connection when you are done with it.  It will time out after 20 minutes and could lose everything.

SQLCommand

    SQL statements are executed via the SQLCommand class
    All Sql statements are valid based on users privilages.
    it requires a SqlConnection and a Sql statement
            var sql = "Select * from Customer;";
            var sqlCmd = new SqlCommand(sql, sqlConn);

Read() points to the first row of the data.
you go row by row to return true, until no data it returns false.

        //creating a method to pass in the sql Select statement to execute
        public void SelectSql(string sql)
        {
            sql = "Select * From Users;";
            SqlCommand sqlcommand = new(sql, connection); 
            //creating sqlcommand as new, passing in sql var for select statement, connection from our class.
            SqlDataReader reader = sqlcommand.ExecuteReader(); //Execute Reader returns sqldatareader
            while (reader.Read())
            {
                int id = Convert.ToInt32(reader["ID"]);
                string? username = Convert.ToString(reader["Username"]);
                string? firstname = Convert.ToString(reader["FirstName"]);
                string? lastname = Convert.ToString(reader["LastName"]);
            }
            reader.Close(); 
        }

After the while loop you have to close the Sql data reader.

So to recap - you will set up your select statement method, the SqlCommand, the SqlDataReader 
    and a while loop to read each row to the debug output. 
    Then close the reader. 
    Then close the connection.

when accessing a database from C# its good practice to create a Class with them.
Created a new Folder under PrsLibrary, called Models.
    created a new class called User and made Public.
    Added properties that match the columns in the database.
    ie. public string Firstname {get; set;}.

created controller folder and class userscontroller.
    need to pass in the connection class to the userscontroller.
    that way it will have a connection it can use.

SqlCommand cmd = new(variable for string, connection)

Column can be NULL - we need to check if it is NULL. 
    if(reader ["Phone"] == System.DBNull.Value)
        user.Phone = null;
    else 


DELETE
    SqlCommand cmd = new(sql, connection.sqlConnection);
    cmd.ExecuteNonQuery(); //This is used for DELETE since you are not Reading with Select statement.

INSERT
    you have to pass in all of the instance of User except ID.



Ternary -shortcut for if else statements with booleans.

    string colorName = "";
    int colorNbr = 1;
    if(colorNbr == 1) 
        colorName = "red";
    else    
        colorName = "blue";

    INSTEAD use Ternary statement

        colorName = (colorNbr == 1) ? "red" : "blue";
                   //if colorNbr = 1 then red, else blue.

SQL parameters      
    built in.

    SELECT statements are easily hacked and changed. 
    Better to use a parameter instead.

    cmd.Parameters.AddWithValue(@column name)

        example. SELECT *
                    From Users      
                    Where id = 1;
                    Where id = 1 or 1 = 1; // this would be false first, then true 2nd, so all are true.

    
                public bool Insert(User user) //pass all the data except the id, which will be 0 indicating trying to add.
                    {
                        string sql = $" INSERT Into Users " +
                                    "( Username, Password, FirstName, LastName, " +
                                    " Phone, Email, IsReviewer, IsAdmin) VALUES " +
                                    " (@Username, @Password, @FirstName, @LastName, " +
                                    " @Phone, @Email, @IsReviewer, @IsAdmin ); ";
                        SqlCommand cmd = new(sql, connection.sqlConnection);
                        cmd.Parameters.AddWithValue("@Username", user.Username);
                        cmd.Parameters.AddWithValue("@Password", user.Password);
                        cmd.Parameters.AddWithValue("@FirstName", user.FirstName);
                        cmd.Parameters.AddWithValue("@LastName", user.LastName);
                        cmd.Parameters.AddWithValue("@Phone", user.Phone);
                        cmd.Parameters.AddWithValue("@Email", user.Email);
                        cmd.Parameters.AddWithValue("@IsReviewer", user.IsReviewer);
                        cmd.Parameters.AddWithValue("@IsAdmin", user.IsAdmin);
                        int rowsAffected = cmd.ExecuteNonQuery();
                        if(rowsAffected != 1)
                        {
                            return false;
                        }
                        return true;

UPDATE 

    IS similar to add but we did it a little differently


                public bool Update(User user)
                                {
                    string sql = $" UPDATE Users Set " +
                                " Username = @Username, " +
                                " Password = @Password, " +
                                " FirstName = @FirstName, " +
                                " LastName = @LastName, " +
                                " Phone = @Phone, " +
                                " Email = @Email, " +
                                " IsReviewer = @IsReviewer, " +
                                " IsAdmin = @IsAdmin " +
                                " Where Id = @ID; ";
                    SqlCommand cmd = new(sql, connection.sqlConnection);
                    cmd.Parameters.AddWithValue("@Username", user.Username);
                    cmd.Parameters.AddWithValue("@Password", user.Password);
                    cmd.Parameters.AddWithValue("@FirstName", user.FirstName);
                    cmd.Parameters.AddWithValue("@LastName", user.LastName);
                    cmd.Parameters.AddWithValue("@Phone", user.Phone);
                    cmd.Parameters.AddWithValue("@Email", user.Email);
                    cmd.Parameters.AddWithValue("@IsReviewer", user.IsReviewer);
                    cmd.Parameters.AddWithValue("@IsAdmin", user.IsAdmin);
                    cmd.Parameters.AddWithValue("@Id", user.ID);
                    int rowsAffected = cmd.ExecuteNonQuery();
                    if(rowsAffected != 1)
                    {
                        return false;
                    }
                    return true;


Might want to retrieve all users by username    
    or all users by IsAdmin
    would create a method for those.

Build Vendors Class & Vendors Controller class

Instead of Char to ToString in C#.

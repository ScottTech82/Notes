

Revisit the book with parts relating to visual code.

Revisit page 123 & 124 catching exceptions.


8/30;
Finish Library tests then
When using division note that cannot divide by 0.

PUT a Test project in your Bank account.
    Write some test cases for the banking app.

Then work on Fibonacci and recursive.

---------------
8/31;

To get more practice, try to do Factorial without looking.
get to know recursion more.  But its not the most efficient way.

        the only time he did recursive fibonacci was a couple weeks ago.
        employer asked prior student if they could code it.

Read Chapter 5 tonight.
Read a part of Chapter 8 g 337 to 347.

-------
9/01;
Go to website list of names and create and Array, then try changing to a dictionary.
Or do a list of 100 numbers.

Microsoft Docs to browse through the lists, since we use it a ton.

Chapter 9 files pg 369 - skip writing to XML Streams
    optional page 386 Compressing Streams. skip Brotli Algor, skip Encoding/Decoding Text,
    skip Encoding strings as byte arrays. Econding/Decoding text, skip Serializing XML, 

    but read Serializing JSON.

    
9/07;

Add the Requests table class and controller.

Chapter 11 in book.  Tech we are going to use in Capstone.
466 to 499
exercise 11.2


show me the select statement that shows the total orders that are higher than the average of orders.
SELECT TotalInvoices
FROM Invoices
Where TotalInvoice > 
    (select TotalInvoice
    From Invoices
    Where AVG(totalinvoices));


USE KEYWORD this.Id = Id to tell the ID in this class. Since the parameter name is identical to property name.
Foreign Key to User so reference User.

on 9/15 start Capstone


LAMBDA
 string names = array of names.
var sortedNames = names.Orderby(n => n) //this means just sort the items in the list and it will be alphabetical.

9/08;
Go through the book and do anything for the Northwind DB in Chapter 11. pg 502


------------------

9/12/22

prior grad visit
    -uses Postman a lot
    -uses port forwarding to test things before pushing live.
    -website on onehost
            -had two projects, poker and three part poker?
            -main page about me, projects.

    -bootcamp was way more difficult
        -more coding
        -in job you do research, check out what you need gather information, flow chart.
        -coding is the least part of his day
        -on team of people with 4 to 5 other engineers.  Mentor and project manager.
        -his mentor is self taught developer from military. first couple weeks just watching.
        -hardest part is picking up each company syntax.
    
    -check out Code coverage, how testing works and why we do testing.

    -offered intern spot
    -others offered jr developer spots
    -there are apprentice programs 
        -but pay wayyy waaaayyy less like 60% less.

9/12/22

Practice creating classes with a constructor and passing values in.
    constructors are for giving properties value when a new instance is created.


Do the order, orderdetail and Product.

9/13/22
add a new branch to you repository, if soemthing goes sideways you still have the original.

9/14/22
tonight go through WebAPITutorial and browse through to look at different parts that maybe 
you dont understand.

9/16/22
Set up WebAPITutorial and used Postman today. Can check video if needed.


in capstone you cannot use any one elses code and cannot turn to collegues. 

9/19/22

Total to be added up in Expense table-with Recalculate expense total at end of tables.

Expense Lines added to Expense.

    Methods Private do not put HTTP Get or anything.

    Expenses paid add to the expenses paid and subtract from Expenses Due.

    read an expense by PK, you want all lineitems and item coming back.
    ExpenseLine same as OrderLine.


Capstone

    back end methods have access to them like we did with Expenses.

    Users 
        username is unique
    
    Vendor 
        code is unique
    
   
   Requests
        Get Reviews by userid not owned by this user.  They cannot review their own requests.


create a folder called PRS inside your repos folder.  Visual studio project inside of PRS


Captstone Notes

// = Done & re-Tested

//Add the user to the request, take out the vendor.
//Add user to get all requests.

//requests controller
//reviews for user -
  //  read the users and check if the user id is correct.
  // change find async on userid to the users table.

  //  if fred is null dont return not found, bad request or argument exception.

  //  take out the fred.status != Reviews

//if statement
  //  put return await putrequest instead of variable.
  //  use the if statement to just set the status and then return
  //  or ternaryn adn return

//requestline controller

 //recalc total = change the error throw exception saying requestid does not exist.


 //update product to confirm recal works.
 //delete to confirm recalc works.

    If I change the product price it does not update the Total unless I update the requestline
    since the Method is not listed under ProductsController update method. 
    I dont think its possible to put it there since its private method to request line.

Done with Capstone and Po/Poline

    Work on SQL and early C#.

============================================================

9/26

Pick a number between 1 and 10.
    random numb generator.

    user to enter a guess and tell them if the guess was 
    too high or too low.
    Keep track of the guesses, cant have infinite number.
        Do like 3 or 4 more guesses.

    so do too high or too low and say wrong this number of guesses 
    remaining. 

    It has to run outside visual studio. 
    ask if they want to run again and if yes, run again.

    --if you want a challenge you can do 1-10, but if they 
    put 25 the range increases to 1-25.



Use active directory in the cloud to store user names or passwords.
Captstone using Get for Login is bad since user name & password is in the URL and in the local cache.
    should be a POST function instead.

========================================================

9/28
On our own we can do Containers in the LAB

We can use the learn on demand lab;
Do SQL, Functions, IoT, Key Vault, Virtual Network

    Azure tutorials - 
https://learn.microsoft.com/en-us/training/azure/
    can learn about SQL in Azure called CosmosDB
    you can go to sandbox and try the exercises in there.


        Could go to ignite.microsoft.com and search archive sessions.
        for developers is dotnet conf.

Markdown All in One extension 
    for Visual Studio Code.
    has a preview feature.

You can use a Azure Trial pass to publish your Angular, SQL Database, etc. 
And with free resources have it uploaded to show people.
Mike will share in Teams File section.

Learn more about PowerShells
    we will use it a lot in teh future.

.Net has a speech library and can talk.
    you can mess with it in PowerShell.
    Add-Type -AssemblyName System.speech
    $speak = New-Object System.Speech.Synthesis.SpeechSynthesizer
    $speak.Speak("Would you like to play a game?")
    $speak.GetInstalledVoices()


============
9/29

Think about working on a personal project
maybe some minimal API's

Read Java book chapter 1.
    skip chapter 2
if possible look at Java book chapter 7 classes
    chapter 6 test & debug would be good after 7.
    Chapter 10 inheritance, interfaces. Whatever you can read.
    Take a shot at banking.. create the account and then savings from account.


10/3 -Spring Boot Capstone project
        Tool Hibernate like EntityFramework and Linq.
        but no Lambda syntax.

    PK's, Unique values, FK's to deal with.

    Oracle owns MySql which combines with Java.

    Work on the SalesDb re-creating it.
        making notes and app properties cannot have mistakes.

10/04

    Six methods we had to hard code in C#.  But dont do login.
        in order, set status from New to Review.
            if total is 200 or less = Approved.  >200 = Review.
            set unconditionally to Approved
            set unconditionally to Rejected

Non-trivial ones - dont worry too much.

            Retreive all orders in Review status, except for particular customer.
                will have to put something in repository to get this to work.
            
            Recalculate the line items.  




10/18

restyle the cv.  Dont use more than 3 colors in business.
contrast the background and foreground
accent color.

**add power message in there
**add an image.
    **do a side by side div for personal info and image.


Captsone will have reviewer page with Approve button or Decline button in bootstrap is Success and Danger buttons.


check user-detail.. need an input in the <td id="uid"><input id="inpid" type="number"></td>
in the getJSON http, after it put , user);
attempt to add a user in.






10/24

SCRUM 
    -open scrum notes at the bottom is to take the practice tests.
    -open scrum pdf's in downloads folder.




10/26
--last part of half of class    
    make changes to user or vendor, change things over to JQuery.
    instead of JavaScript.

--fade in and fade out a message on screen instead of the alert message.





Started up ERS system without visual studio
    Git bash -> need to be in the same folder as .csproj file.
    dotnet run.

    it will run the application without visual studio.


Use ng new --help to see a list of options for creating a new angular app


Assessment for JavaScript

--global attributes of HTML
    ones you can put on anything in the body tag.  Class, Id, Style, etc.
--know which HTML statements have a closing tag.  All but Input, Img, link.
--know the CSS style to make text display in italic.  font-style: italic;
--know how to make a table expand the width of page.  width: 100%
--know how to style two div tags <div id="div1"></div>

--side by side, display: inline-block; 49px; since 50px goes over.
    <style> div {min-height; 300px; vertical-align; top; width: 49%; display: inline-block;}
    </style> <body> <div> <ol> <li>This is the left div</li></ol></div>
    <div>This si the right div</div></body></html> 
        //see block-inline folder with side-by-side-divs.html.

--know the syntax of anonymous javascript function.  const blah = () => { } 
        anonymous does not have a name.
        .done = (0) => {something..}
--Core javascript data types. string, number, boolean, could do Array or Object.
--Know difference between == and ===.  the data could be same but type different.
        == data the same?   === types are the same?
--know the syntax of iterating through a collection.  for(let fred of freds) {..}
--set or retreive data in input tag. Value Attribute.  value=Train@MAX
            in JavaScript file its .val() to get and .val("") to set





Git Bash > go to the folder with csproj.user file
    >start dotnet run

will open and run in windows cmd prompt.




10/31 && 11/01
Capstone    
    Can create a Footer to show on everypage after <rounter-outlet></router-outlet>
        that would say created by Josh Scott.. etc.
    Or could have the login info of the user that logged in.

ADD searching in Capstone.  Check Angular notes for searching and the ERSNG project.
    Phone & email might be NULL.  Add a NULL check.

Login is in a FORM and the FORM is centered on teh page.
    input box in a form, you have to add 
        name="something unique"

on the MENU on far right is the username [sa] 
    you can put the name and style so its on the right side of the MENU
    login user stored in teh system service when you get logged in.

User/Vendor have no foreign key.  So nothing too bad.
Product has a foreign key to Vendor.
    -->have to read in all foreign key values and put in drop down list
    -->allow the user to select the vendor to put the foreign key into the product.

Request List the other issue is the Lines link, after Detail | Edit | Lines.
    --> you have a single request on top part and then all the request Lines
    --> on the bottom table.  It looks like 2 tables on top of one another.

    --> then after changing request lines.. editing or creating there is a link
        under Actions that says Submit For Review.  Since its >$50 its set to REVIEW.

    --> no request lines in the menu, they are worked off of the request with line link.

If a reviewer you can click review the request and you cant change anything
    but there is an Approve | Reject button links on bottom left.
    Approve works
    Reject pops in a reason | input box for typing in the reason then a submit button.



Push up your work in Capstone every single day, so he can see where you are at with it.


80/100 pts to be certified.


dont embed the baseurl with the localhost string in the code.
use an external file of Json.



Make One Service that wont make calls to controllers, but we can pass around to 
    all of the other services. ie.. employee, expense, expenseline, items.

Calling it the System Service.  or ng g s common/system.  It creates system.service.test
add in the baseurl to be used for all the services.  Cant have /employee or whatever, since 
all will use it and add that on.

                export class SystemService {

                baseurl: string = "http://localhost:5432/api";


inject into employee service 
        constructor(
            private sys: SystemService,
            private http: HttpClient
            ) { }


baseurl: string = `${this.sys.baseurl}/employees`;
  //using interpolated string adding in sys.baseurl and then /employees.
    //now employeeservice this.baseurl is the entire localhost and /employees.


login before accessing the app.

employee: any = null;

now inject system service into the employee login.

add in our system service to the login function. If successful, we want to pass res 
    to the system service employee.
And add to make them null to start, so have to login.

  login(): void {
    this.sys.employee = null;
    this.emplsvc.login(this.email, this.password).subscribe({
      next: (res) => {
        console.debug("Employee:", res);
        this.sys.employee = res;
        this.router.navigateByUrl("/empl/list");

now back to system service to add a function to check for login.

  constructor(
    private router: Router
  ) { }

  chkLogin(): void {
    if(this.employee === null) {
      this.router.navigateByUrl("/empl/login");
    }
  }

  If employee is logged in it will skip this and be fine.

--add in constructor the 
private sys: SystemService,


--then put this.sys.chkLogin();

 ngOnInit(): void {
    this.sys.chkLogin();
    this.emplsvc.list().subscribe({
      next: (res) => {
        console.debug("Employees:", res);
        this.empls = res;
      },
      error: (err) => {
        console.error(err);
      }
    });
  }



Assets folder   
    -> new file config.Json
{
    "baseurl": "http://localhost:5432/api"
}

Create new service.. app-init in main app area, so no folders in gitbash
    -> create a function getSettings(): Promise<any> { 
        return this.http.get("./assets/config.json").firstValueFrom
        }

    -add properties.. config: any;

  getSettings(): Promise<any> {
    return this.http.get("./assets/config.json").toPromise().then(
      (data:any) => {
        this.config = data;
      }
    )
  }

app.module.ts
        export function startupServiceFactory(appInit: AppInitService): Function {
        return () => appInit.getSettings();
        }

    -function to call to cause that getsettings to execute and read the data in the configuration.

down to proviers area - add the following

            providers: [
                AppInitService, {
                provide: APP_INITIALIZER,
                useFactory: startupServiceFactory,
                    deps: [AppInitService],
                    multi: true
                }
            ],



Capstone/Angular
***Finished Product-List.***

1. Can I disable the original Delete button once the Verify Delete button is showing?
2. Not sure I like the Delete button for User or Vendor.  Move location?
3. Work on the User Login
4. Move the URL from SystemService to Config.JSON.
5. Create the sorting feature for the tables by column header, asc & desc
6. figure out the FK 

* Drop down list in products and requests?




DEMO day

-Asked to either be part of a small team to do a demonstration of the Capstone PRS 
-Or not doing the demo, you have a short presentation to do.

reading notes, but want to get down to bullet point notes
    --cant read off a sheet of paper.


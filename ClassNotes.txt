

Revisit the book with parts relating to visual code.

Revisit page 123 & 124 catching exceptions.


8/30;
Finish Library tests then
When using division note that cannot divide by 0.

PUT a Test project in your Bank account.
    Write some test cases for the banking app.

Then work on Fibonacci and recursive.

---------------
8/31;

To get more practice, try to do Factorial without looking.
get to know recursion more.  But its not the most efficient way.

        the only time he did recursive fibonacci was a couple weeks ago.
        employer asked prior student if they could code it.

Read Chapter 5 tonight.
Read a part of Chapter 8 g 337 to 347.

-------
9/01;
Go to website list of names and create and Array, then try changing to a dictionary.
Or do a list of 100 numbers.

Microsoft Docs to browse through the lists, since we use it a ton.

Chapter 9 files pg 369 - skip writing to XML Streams
    optional page 386 Compressing Streams. skip Brotli Algor, skip Encoding/Decoding Text,
    skip Encoding strings as byte arrays. Econding/Decoding text, skip Serializing XML, 

    but read Serializing JSON.

    
9/07;

Add the Requests table class and controller.

Chapter 11 in book.  Tech we are going to use in Capstone.
466 to 499
exercise 11.2


show me the select statement that shows the total orders that are higher than the average of orders.
SELECT TotalInvoices
FROM Invoices
Where TotalInvoice > 
    (select TotalInvoice
    From Invoices
    Where AVG(totalinvoices));


USE KEYWORD this.Id = Id to tell the ID in this class. Since the parameter name is identical to property name.
Foreign Key to User so reference User.

on 9/15 start Capstone


LAMBDA
 string names = array of names.
var sortedNames = names.Orderby(n => n) //this means just sort the items in the list and it will be alphabetical.

9/08;
Go through the book and do anything for the Northwind DB in Chapter 11. pg 502


------------------

9/12/22

prior grad visit
    -uses Postman a lot
    -uses port forwarding to test things before pushing live.
    -website on onehost
            -had two projects, poker and three part poker?
            -main page about me, projects.

    -bootcamp was way more difficult
        -more coding
        -in job you do research, check out what you need gather information, flow chart.
        -coding is the least part of his day
        -on team of people with 4 to 5 other engineers.  Mentor and project manager.
        -his mentor is self taught developer from military. first couple weeks just watching.
        -hardest part is picking up each company syntax.
    
    -check out Code coverage, how testing works and why we do testing.

    -offered intern spot
    -others offered jr developer spots
    -there are apprentice programs 
        -but pay wayyy waaaayyy less like 60% less.

9/12/22

Practice creating classes with a constructor and passing values in.
    constructors are for giving properties value when a new instance is created.


Do the order, orderdetail and Product.

9/13/22
add a new branch to you repository, if soemthing goes sideways you still have the original.

9/14/22
tonight go through WebAPITutorial and browse through to look at different parts that maybe 
you dont understand.

9/16/22
Set up WebAPITutorial and used Postman today. Can check video if needed.


in capstone you cannot use any one elses code and cannot turn to collegues. 

9/19/22

Total to be added up in Expense table-with Recalculate expense total at end of tables.

Expense Lines added to Expense.

    Methods Private do not put HTTP Get or anything.

    Expenses paid add to the expenses paid and subtract from Expenses Due.

    read an expense by PK, you want all lineitems and item coming back.
    ExpenseLine same as OrderLine.


Capstone

    back end methods have access to them like we did with Expenses.

    Users 
        username is unique
    
    Vendor 
        code is unique
    
   
   Requests
        Get Reviews by userid not owned by this user.  They cannot review their own requests.


create a folder called PRS inside your repos folder.  Visual studio project inside of PRS


Captstone Notes

// = Done & re-Tested

//Add the user to the request, take out the vendor.
//Add user to get all requests.

//requests controller
//reviews for user -
  //  read the users and check if the user id is correct.
  // change find async on userid to the users table.

  //  if fred is null dont return not found, bad request or argument exception.

  //  take out the fred.status != Reviews

//if statement
  //  put return await putrequest instead of variable.
  //  use the if statement to just set the status and then return
  //  or ternaryn adn return

//requestline controller

 //recalc total = change the error throw exception saying requestid does not exist.


 //update product to confirm recal works.
 //delete to confirm recalc works.

    If I change the product price it does not update the Total unless I update the requestline
    since the Method is not listed under ProductsController update method. 
    I dont think its possible to put it there since its private method to request line.

Done with Capstone and Po/Poline

    Work on SQL and early C#.

============================================================

9/26

Pick a number between 1 and 10.
    random numb generator.

    user to enter a guess and tell them if the guess was 
    too high or too low.
    Keep track of the guesses, cant have infinite number.
        Do like 3 or 4 more guesses.

    so do too high or too low and say wrong this number of guesses 
    remaining. 

    It has to run outside visual studio. 
    ask if they want to run again and if yes, run again.

    --if you want a challenge you can do 1-10, but if they 
    put 25 the range increases to 1-25.



Use active directory in the cloud to store user names or passwords.
Captstone using Get for Login is bad since user name & password is in the URL and in the local cache.
    should be a POST function instead.

========================================================

9/28
On our own we can do Containers in the LAB

We can use the learn on demand lab;
Do SQL, Functions, IoT, Key Vault, Virtual Network

    Azure tutorials - 
https://learn.microsoft.com/en-us/training/azure/
    can learn about SQL in Azure called CosmosDB
    you can go to sandbox and try the exercises in there.


        Could go to ignite.microsoft.com and search archive sessions.
        for developers is dotnet conf.

Markdown All in One extension 
    for Visual Studio Code.
    has a preview feature.

You can use a Azure Trial pass to publish your Angular, SQL Database, etc. 
And with free resources have it uploaded to show people.
Mike will share in Teams File section.

Learn more about PowerShells
    we will use it a lot in teh future.

.Net has a speech library and can talk.
    you can mess with it in PowerShell.
    Add-Type -AssemblyName System.speech
    $speak = New-Object System.Speech.Synthesis.SpeechSynthesizer
    $speak.Speak("Would you like to play a game?")
    $speak.GetInstalledVoices()


============
9/29

Think about working on a personal project
maybe some minimal API's

Read Java book chapter 1.
    skip chapter 2
if possible look at Java book chapter 7 classes
    chapter 6 test & debug would be good after 7.
    Chapter 10 inheritance, interfaces. Whatever you can read.
    Take a shot at banking.. create the account and then savings from account.


10/3 -Spring Boot Capstone project
        Tool Hibernate like EntityFramework and Linq.
        but no Lambda syntax.

    PK's, Unique values, FK's to deal with.

    Oracle owns MySql which combines with Java.

    Work on the SalesDb re-creating it.
        making notes and app properties cannot have mistakes.

10/04

    Six methods we had to hard code in C#.  But dont do login.
        in order, set status from New to Review.
            if total is 200 or less = Approved.  >200 = Review.
            set unconditionally to Approved
            set unconditionally to Rejected

Non-trivial ones - dont worry too much.

            Retreive all orders in Review status, except for particular customer.
                will have to put something in repository to get this to work.
            
            Recalculate the line items.  

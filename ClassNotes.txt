

Revisit the book with parts relating to visual code.

Revisit page 123 & 124 catching exceptions.


8/30;
Finish Library tests then
When using division note that cannot divide by 0.

PUT a Test project in your Bank account.
    Write some test cases for the banking app.

Then work on Fibonacci and recursive.

---------------
8/31;

To get more practice, try to do Factorial without looking.
get to know recursion more.  But its not the most efficient way.

        the only time he did recursive fibonacci was a couple weeks ago.
        employer asked prior student if they could code it.

Read Chapter 5 tonight.
Read a part of Chapter 8 g 337 to 347.

-------
9/01;
Go to website list of names and create and Array, then try changing to a dictionary.
Or do a list of 100 numbers.

Microsoft Docs to browse through the lists, since we use it a ton.

Chapter 9 files pg 369 - skip writing to XML Streams
    optional page 386 Compressing Streams. skip Brotli Algor, skip Encoding/Decoding Text,
    skip Encoding strings as byte arrays. Econding/Decoding text, skip Serializing XML, 

    but read Serializing JSON.

    
9/07;

Add the Requests table class and controller.

Chapter 11 in book.  Tech we are going to use in Capstone.
466 to 499
exercise 11.2


show me the select statement that shows the total orders that are higher than the average of orders.
SELECT TotalInvoices
FROM Invoices
Where TotalInvoice > 
    (select TotalInvoice
    From Invoices
    Where AVG(totalinvoices));


USE KEYWORD this.Id = Id to tell the ID in this class. Since the parameter name is identical to property name.
Foreign Key to User so reference User.

on 9/15 start Capstone


LAMBDA
 string names = array of names.
var sortedNames = names.Orderby(n => n) //this means just sort the items in the list and it will be alphabetical.

9/08;
Go through the book and do anything for the Northwind DB in Chapter 11. pg 502


------------------

9/12/22

prior grad visit
    -uses Postman a lot
    -uses port forwarding to test things before pushing live.
    -website on onehost
            -had two projects, poker and three part poker?
            -main page about me, projects.

    -bootcamp was way more difficult
        -more coding
        -in job you do research, check out what you need gather information, flow chart.
        -coding is the least part of his day
        -on team of people with 4 to 5 other engineers.  Mentor and project manager.
        -his mentor is self taught developer from military. first couple weeks just watching.
        -hardest part is picking up each company syntax.
    
    -check out Code coverage, how testing works and why we do testing.

    -offered intern spot
    -others offered jr developer spots
    -there are apprentice programs 
        -but pay wayyy waaaayyy less like 60% less.

9/12/22

Practice creating classes with a constructor and passing values in.
    constructors are for giving properties value when a new instance is created.


Do the order, orderdetail and Product.

9/13/22
add a new branch to you repository, if soemthing goes sideways you still have the original.

9/14/22
tonight go through WebAPITutorial and browse through to look at different parts that maybe 
you dont understand.

9/16/22
Set up WebAPITutorial and used Postman today. Can check video if needed.


in capstone you cannot use any one elses code and cannot turn to collegues. 

9/19/22

Total to be added up in Expense table-with Recalculate expense total at end of tables.

Expense Lines added to Expense.

    Methods Private do not put HTTP Get or anything.

    Expenses paid add to the expenses paid and subtract from Expenses Due.

    read an expense by PK, you want all lineitems and item coming back.
    ExpenseLine same as OrderLine.


Capstone

    back end methods have access to them like we did with Expenses.

    Users 
        username is unique
    
    Vendor 
        code is unique
    
   
   Requests
        Get Reviews by userid not owned by this user.  They cannot review their own requests.


create a folder called PRS inside your repos folder.  Visual studio project inside of PRS


Captstone Notes

// = Done & re-Tested

//Add the user to the request, take out the vendor.
//Add user to get all requests.

//requests controller
//reviews for user -
  //  read the users and check if the user id is correct.
  // change find async on userid to the users table.

  //  if fred is null dont return not found, bad request or argument exception.

  //  take out the fred.status != Reviews

//if statement
  //  put return await putrequest instead of variable.
  //  use the if statement to just set the status and then return
  //  or ternaryn adn return

//requestline controller

 //recalc total = change the error throw exception saying requestid does not exist.


 //update product to confirm recal works.
 //delete to confirm recalc works.

    If I change the product price it does not update the Total unless I update the requestline
    since the Method is not listed under ProductsController update method. 
    I dont think its possible to put it there since its private method to request line.

Done with Capstone and Po/Poline

    Work on SQL and early C#.

============================================================

9/26

Pick a number between 1 and 10.
    random numb generator.

    user to enter a guess and tell them if the guess was 
    too high or too low.
    Keep track of the guesses, cant have infinite number.
        Do like 3 or 4 more guesses.

    so do too high or too low and say wrong this number of guesses 
    remaining. 

    It has to run outside visual studio. 
    ask if they want to run again and if yes, run again.

    --if you want a challenge you can do 1-10, but if they 
    put 25 the range increases to 1-25.



Use active directory in the cloud to store user names or passwords.
Captstone using Get for Login is bad since user name & password is in the URL and in the local cache.
    should be a POST function instead.

========================================================

9/28
On our own we can do Containers in the LAB

We can use the learn on demand lab;
Do SQL, Functions, IoT, Key Vault, Virtual Network

    Azure tutorials - 
https://learn.microsoft.com/en-us/training/azure/
    can learn about SQL in Azure called CosmosDB
    you can go to sandbox and try the exercises in there.


        Could go to ignite.microsoft.com and search archive sessions.
        for developers is dotnet conf.

Markdown All in One extension 
    for Visual Studio Code.
    has a preview feature.

You can use a Azure Trial pass to publish your Angular, SQL Database, etc. 
And with free resources have it uploaded to show people.
Mike will share in Teams File section.

Learn more about PowerShells
    we will use it a lot in teh future.

.Net has a speech library and can talk.
    you can mess with it in PowerShell.
    Add-Type -AssemblyName System.speech
    $speak = New-Object System.Speech.Synthesis.SpeechSynthesizer
    $speak.Speak("Would you like to play a game?")
    $speak.GetInstalledVoices()


============
9/29

Think about working on a personal project
maybe some minimal API's

Read Java book chapter 1.
    skip chapter 2
if possible look at Java book chapter 7 classes
    chapter 6 test & debug would be good after 7.
    Chapter 10 inheritance, interfaces. Whatever you can read.
    Take a shot at banking.. create the account and then savings from account.


10/3 -Spring Boot Capstone project
        Tool Hibernate like EntityFramework and Linq.
        but no Lambda syntax.

    PK's, Unique values, FK's to deal with.

    Oracle owns MySql which combines with Java.

    Work on the SalesDb re-creating it.
        making notes and app properties cannot have mistakes.

10/04

    Six methods we had to hard code in C#.  But dont do login.
        in order, set status from New to Review.
            if total is 200 or less = Approved.  >200 = Review.
            set unconditionally to Approved
            set unconditionally to Rejected

Non-trivial ones - dont worry too much.

            Retreive all orders in Review status, except for particular customer.
                will have to put something in repository to get this to work.
            
            Recalculate the line items.  




10/18

restyle the cv.  Dont use more than 3 colors in business.
contrast the background and foreground
accent color.

**add power message in there
**add an image.
    **do a side by side div for personal info and image.


Captsone will have reviewer page with Approve button or Decline button in bootstrap is Success and Danger buttons.


check user-detail.. need an input in the <td id="uid"><input id="inpid" type="number"></td>
in the getJSON http, after it put , user);
attempt to add a user in.






10/24

SCRUM 
    -open scrum notes at the bottom is to take the practice tests.
    -open scrum pdf's in downloads folder.




10/26
--last part of half of class    
    make changes to user or vendor, change things over to JQuery.
    instead of JavaScript.

--fade in and fade out a message on screen instead of the alert message.





Started up ERS system without visual studio
    Git bash -> need to be in the same folder as .csproj file.
    dotnet run.

    it will run the application without visual studio.


Use ng new --help to see a list of options for creating a new angular app


Assessment for JavaScript

--global attributes of HTML
    ones you can put on anything in the body tag.  Class, Id, Style, etc.
--know which HTML statements have a closing tag.  All but Input, Img, link.
--know the CSS style to make text display in italic.  font-style: italic;
--know how to make a table expand the width of page.  width: 100%
--know how to style two div tags <div id="div1"></div>

--side by side, display: inline-block; 49px; since 50px goes over.
    <style> div {min-height; 300px; vertical-align; top; width: 49%; display: inline-block;}
    </style> <body> <div> <ol> <li>This is the left div</li></ol></div>
    <div>This si the right div</div></body></html> 
        //see block-inline folder with side-by-side-divs.html.

--know the syntax of anonymous javascript function.  const blah = () => { } 
        anonymous does not have a name.
        .done = (0) => {something..}
--Core javascript data types. string, number, boolean, could do Array or Object.
--Know difference between == and ===.  the data could be same but type different.
        == data the same?   === types are the same?
--know the syntax of iterating through a collection.  for(let fred of freds) {..}
--set or retreive data in input tag. Value Attribute.  value=Train@MAX
            in JavaScript file its .val() to get and .val("") to set





Git Bash > go to the folder with csproj.user file
    >start dotnet run

will open and run in windows cmd prompt.




10/31 && 11/01
Capstone    
    Can create a Footer to show on everypage after <rounter-outlet></router-outlet>
        that would say created by Josh Scott.. etc.
    Or could have the login info of the user that logged in.

ADD searching in Capstone.  Check Angular notes for searching and the ERSNG project.
    Phone & email might be NULL.  Add a NULL check.

Login is in a FORM and the FORM is centered on teh page.
    input box in a form, you have to add 
        name="something unique"

on the MENU on far right is the username [sa] 
    you can put the name and style so its on the right side of the MENU
    login user stored in teh system service when you get logged in.

User/Vendor have no foreign key.  So nothing too bad.
Product has a foreign key to Vendor.
    -->have to read in all foreign key values and put in drop down list
    -->allow the user to select the vendor to put the foreign key into the product.

Request List the other issue is the Lines link, after Detail | Edit | Lines.
    --> you have a single request on top part and then all the request Lines
    --> on the bottom table.  It looks like 2 tables on top of one another.

    --> then after changing request lines.. editing or creating there is a link
        under Actions that says Submit For Review.  Since its >$50 its set to REVIEW.

    --> no request lines in the menu, they are worked off of the request with line link.

If a reviewer you can click review the request and you cant change anything
    but there is an Approve | Reject button links on bottom left.
    Approve works
    Reject pops in a reason | input box for typing in the reason then a submit button.



Push up your work in Capstone every single day, so he can see where you are at with it.


80/100 pts to be certified.


dont embed the baseurl with the localhost string in the code.
use an external file of Json.



Make One Service that wont make calls to controllers, but we can pass around to 
    all of the other services. ie.. employee, expense, expenseline, items.

Calling it the System Service.  or ng g s common/system.  It creates system.service.test
add in the baseurl to be used for all the services.  Cant have /employee or whatever, since 
all will use it and add that on.

                export class SystemService {

                baseurl: string = "http://localhost:5432/api";


inject into employee service 
        constructor(
            private sys: SystemService,
            private http: HttpClient
            ) { }


baseurl: string = `${this.sys.baseurl}/employees`;
  //using interpolated string adding in sys.baseurl and then /employees.
    //now employeeservice this.baseurl is the entire localhost and /employees.


login before accessing the app.

employee: any = null;

now inject system service into the employee login.

add in our system service to the login function. If successful, we want to pass res 
    to the system service employee.
And add to make them null to start, so have to login.

  login(): void {
    this.sys.employee = null;
    this.emplsvc.login(this.email, this.password).subscribe({
      next: (res) => {
        console.debug("Employee:", res);
        this.sys.employee = res;
        this.router.navigateByUrl("/empl/list");

now back to system service to add a function to check for login.

  constructor(
    private router: Router
  ) { }

  chkLogin(): void {
    if(this.employee === null) {
      this.router.navigateByUrl("/empl/login");
    }
  }

  If employee is logged in it will skip this and be fine.

--add in constructor the 
private sys: SystemService,


--then put this.sys.chkLogin();

 ngOnInit(): void {
    this.sys.chkLogin();
    this.emplsvc.list().subscribe({
      next: (res) => {
        console.debug("Employees:", res);
        this.empls = res;
      },
      error: (err) => {
        console.error(err);
      }
    });
  }



Assets folder   
    -> new file config.Json
{
    "baseurl": "http://localhost:5432/api"
}

Create new service.. app-init in main app area, so no folders in gitbash
    -> create a function getSettings(): Promise<any> see below.

    -add properties.. config: any;

  getSettings(): Promise<any> {
    return this.http.get("./assets/config.json").toPromise().then(
      (data:any) => {
        this.config = data;
      }
    )
  }

app.module.ts
        export function startupServiceFactory(appInit: AppInitService): Function {
        return () => appInit.getSettings();
        }

    -function to call to cause that getsettings to execute and read the data in the configuration.

down to providers area - add the following

            providers: [
                AppInitService, {
                provide: APP_INITIALIZER,
                useFactory: startupServiceFactory,
                    deps: [AppInitService],
                    multi: true
                }
            ],

Angular Review;
-know the purpose and use of the app.module.ts and app-routing.module.ts
    app module;   app-routing provides the routes & paths for all the components.
    -Every object used in the application must be known to the app module.
    -Modules are similar to:
        an EXE or DLL in .NET
        a JAR in Java

-know what is required to add components to app.module.ts
    --if manually adding them, import and declarations key.

-know proper way to generate components.
    --ng g c in folder and inject the service into the component, through constructor.
-know the unique features of services and why they are used to make calls to back-end.
    --services are shared. multiple components can use them.  Comps dont use other comps.
-know the decorator names of the component, service, and properties
    --@ sign and app-user-list. Pipe is pipe and services is Injectable.
    --app component decorator has selectors like app-root. Or app-user-list.
    --service decorator is @Injectable({ providedIn: 'root' })
    --@Component({ JSON data })
    --never add a semi colon!!!

-know the directives *ngIf, *ngFor, *ngSwitch, one-way binding, two-way binding 
and how to use each one.  (not much of switch)
    --ngIf is for restricting access, like an Admin. *ngIf="IsAdmin === true"
        control whether or not something shows up.
    --ngFor iterates through a collection or array.
    --one-way binding is {{user.username}} and cannot be changed by the user interaction.
    --two-way binding is [(ngModel)] and allows user to interact & change values.

-know the purpose and the use of pipes
    --sorting and searching.  Use for currency too. Or bools.
    --{{p.price|currency}}

-know how to define a route in the app-routing.module.ts
    --no slash in app-routing {path: "user/list", component: UserListComponent} 
    --import component name.. if it doesnt auto import.

-Know the main purpose of the constructor in components
    --inject services. Not to initialize data.
    --ie. private sys: SystemService, private usersvc: UserService, etc.

-Know how a component gets access to a service
    --we inject them into the constructor.
    --same as the above.

-Know the syntax and differences of one-way and two-way binding.
    form control with input boxes, select lists, and so on. 
    two-way is built for user to interact with.
    one-way is not for user to interact with.








Capstone/Angular

1. Done.


Other things to do..
1. Add PO
2. Can I disable the original Delete button once the Verify Delete button is showing?

Unable to sort by vendor name in Products and username in Requests.
    vendor_name?


**FK -remember when do the HTML for the FK its dropdown type select.
    select statement you only need ngModel, point to vendorId of the product.
        then options ngFor, loop thru vendors. value points to v.id.
        --might have to do value="{{v.id}}" ??
        --I did [ngValue]="v.id"

Foreign Key =product
    in HTML have a select list to show the user the vendors.
        <select> tag ngModel points to product.vendor.id.
        <option> tag have ngFor loops through collection of vendors.
            that read in the ngOnInit. Then needed [ngValue]="vendor.id"

    Vendor instance in the product.  When we read the product we can see the 
        entire instance.  Backend we used .include.
        -that vendor instance you only want to read it and not pass it in.

    Request 
        Really important to make sure you have an import statement for the 
        request class in all components.
            -manually put it in.

Requestlines
    -2 things you will do and remain in the component, not navigate to list.
        inside class is method;  "submit for review"
        you dont want to navigate away, you want to see the status update.
        second is delete request line, you want to stay on the request and see the 
        line deleted is gone.

        -re-read the request and store it in the page.
        -You cannot navigate into the same page again. But need to refresh.

            request: Request; //read by pk in OnInit store in request.

            submitForReview(): void {
                update request;
                call refresh();
            }

            deleteRequestline(): void {
                delete requestline;
                call refresh();
            }

            refresh(): void {
                instead of ngOnInit, we are reading by request PK and storing here, 
                then calling this in OnInit.
            }

            ngOnInit(): void {
                this.refresh();
                //read a single request by pk and store in request above.
            }



review to get all reviews not owned.  
    -reject needs a text box to complete and has to show up on the request.
    -



Cap Cert process
-He will watch what is on our screen and he will go show me this and that.
-Dont care what data is in there.
    -check out login, fail & successful
    -list component.  create, edit, show details an delete.
    -request: go into, show normal functions. Create a new one, modify..
        create a new requestline.  \
    -set request to review status.
    -have a reviewer that can set things to approve or reject.


DEMO day

-Asked to either be part of a small team to do a demonstration of the Capstone PRS 
-Or not doing the demo, you have a short presentation to do.

reading notes, but want to get down to bullet point notes
    --cant read off a sheet of paper.

Pick a project to talk about.
90 seconds long
    -not really a powerpoint but can use images only
    -no text since they feel like you are covering all text showing
    -5 bullet points = major topics you want to talk about.
        --break down to sub bullet points.

--3 to 5 bulleted topics to talk about.

    I wanted to talk about our PRS or Purchase Request System we built.

    *User authentication and authorization to review
        --users are able to log in and create a new purchase request which 
        will auto populate their username on the request and submit it for review.
        They can view the status of their requests.
        
        --building the system service which stores the logged in user
        and is then checked for authorization access to certain data.

    *Request reviewed by reviewers and not each user
        --request data is not accessable to every user.  They have to have a specific 
        reviewer status that is checked prior to displaying the data.

    *Automated business rules.
        --setting up automated rules for individual business needs. 
        for example we have setup where requests less than or equal to $50 
        will automatically be marked to approved.  As opposed to needing a 
        reviewer logged in to review the requests.

        --rules enforced automatically

    *Future Purchase Order generation for vendor



**regular people not technical, keep simple**
    **raise voice, or put emphasis on something.**
    
      --definitely not forced to talk to you about
    I wanted to talk about the Purchase Request System we built and some
    of the features we implemented.  It was really fun to build and this might be 
    boring for you, so i'll try to be brief.

    ---Users are required to login prior to accessing the system and can be setup 
    to have different roles like a Reviewer, an Admin, or just regular users. This
    can be customized based on business needs. 

    ---all users can create purchase requests under their username. 
    And see their requests or make changes if the need arises.

    But, only certain users, like a manager for example, have access to 
    approve or reject these requests.  **The status for the logged in user 
    is checked prior to displaying the data.** So only those who are authorized
    have specific accesses.

    ---One of the cooler features we did was
     automated business rules that can be setup for individual business needs.
    For example we setup where requests less than or equal to $50 will 
    automatically be marked as Approved; rather than getting everyone involved 
    for the smaller requests and freeing up business resources.

    ---These automated rules can be scaled if the business decides they want more or less. 
    We can change the code once instead of changing 
    It's done automatically so business rules themselves do not need to be changed. 
    And people do not have to be re-trained. Its automatically implemented and who 
    doesn't like that!
       
        <could add>
    If company wants to tighten up financially the rules can be scaled or changed on the 
    fly, so less are automtically approved.




review SQL & C#.  We will get questions.




get, put, post, and patch.
    http methods that our restful webservice used to get, create, chnage and delete data from the SQL table.

Interface.  It is a contract (magical word) 
    variable of type interface and a class that implments all methods of the interface.
    we used the animals project.


Bootstrap.  CSS Library.  class styles built into bootstrap.




Time Spent for these.


Job Search

    How many days a week?  5
    How many hours a day? 4 to 5

    Checking Email. 
        -will get blasted by recruiters.
            I recently graduated from a bootcamp and do not have experience, is this going to match?
            --send to them right off the bat.

    Spending time on Indeed, LinkedIn, Dice.  (heard Monday morning at 10am, they get posted)

    OH Means Jobs -see jobs posted there that are not posted anywhere else.

    BeHearty get on there.

        --maybe an hour each day looking for leads, but need to apply for jobs.

Coding

    time.. 5 days a week for sure.
    2 - 4hours a day. 
    Push something up each day!  Git Green.

Change posted resumes.
    ->each week change the already posted resumes. to refresh the system and stack order.
    -> can have the same resume as 2 file names and cylce back and forth.


Cincy Chamber used to be good, but now using Mason Chamber.

Meetups.  Do some. lol.


SCOUT   (used to be called Gaslight)
    -they have apprenticeship with 2 per 1 SR. For 6 months.
    -if we do this talk to Annette first though.



On linkedin if you see that someone at MAX is a 2nd level connection.
    reach out to them and see if you can connect with them directly.


Send thank you's to everyone we meet at speed interviews.
    








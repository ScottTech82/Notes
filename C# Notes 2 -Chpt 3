Chapter 3

INCREMENT Operator
        int n = 0;
        n = n + 1; //n is 1
        n++; //n is 2, adding to itself
        n++; //n is 3

        n--; //n is 2
        ++n; // n is 3

        int a = 0;
        int b = a++; // b is 0, but then a is incremented a is 1 now, so b is 1.
        int c = ++a; //a is incremented to 2 first, now C is 2.
    
    The side the increment operator is on changes which is done first.

        one sign is either postive or negative
        int a = 1;  int b = +a // b = 1 
        int c = -a; // c = -1
        The minus sign flips from postive to negative or vice versa.

LOGICAL OPERATORS 

        & - Ampersand is logical AND operator.
        | is the logical OR operator.
        ! is the logical NOT operator.
        ^ is the logical XOR operator that is not used much.
            XOR statement flips the booleon designation for one.
                A| B| A^B|
                T| T|  F | b is flipped to F, so the whole statement is False.
                T| F|  T |
                F| T|  T |
                F| F|  F |
   
    Double && or Double || will evaluate the first one and if false will not review the rest
        it will always be false.

Double == is comparison operator.

int a = 0;
int b = 1;

var answer (a == 1) && (++b == 1)
    this will end at the first false.  So b will not be incremented to 2.
    the order does make a difference in this case.

CONTROL FLOW
    Selection Statements
        if(expression) {
            something in statement block
        } else if {
            something else in statement block
        } else
    You can nest if statements, but after 2 levels it gets complicated to read for others.


SWITCH Statements

    switch(variable) {
        case <what the variable equals>:
            Console.WriteLine();
            break;
        case <another>:
            Console.WriteLine();
            break;
        default:
            Console.WriteLine();
            break;
    }

    switch statement is much faster, it jumps right to the answer instead of checking every single line
    Easier to code out a list of items than using if else statement.
    
    SWITCH Expression simplifies even further
        salesperson = stateCode switch
        {
             "OH" => "Karl",
             "KY" => "Sam",
             "IN" => "Ian",
              _ => "Greg"  //default by using underscore
        };

ITERATION Statements

While Loop

    while loop that will add up all the numbers from 1 to 100.
        int i = 100;
        int sum = 0;

        while(i > 0)
    {
        sum += i;
        i--;
    }
    Console.WriteLine($"Sum of numbers 1 to 100 is {sum}");
    
    Be careful of infinite loops, make sure it will end.

DO While Loop

    everything is the same as the while loop, EXCEPT the condition is checked after it runs.
    so instead of checking for i > 0 then execute, the do will execute then check for i > 0
        
         do
        {
            sum += i;
            i--;
        } 
        while (i > 0);

    the do will execute at least once.  where the while might not if its fasle.
    mostly use the while statements instead of do statement.

FOR Statement

    Typically use the FOR statement as its more concise, showing exactly what is going on.
    less chance it could get changed by someone else.

    intializer expression, conditional expression, increment expression.

    more capabilities as the while, but can do the exact same thing.
    
    for(segment; segment; segment)
    
    for(int i = 100; i > 0; i--)
        {
            sum +=1;
        }

    the for statement executes segment 1 & segment 2
    then goes to the statement block to execute, then back to segment 3.

Make everything a variable name instead of a hard value.
        instead of for(int i = 1; i <= 7; i++)
        since that 7 could changed
            number = 7;
        for(int i = 1; i <= number; i++)

Check the FactorialTutorial visual studio project for a complex example.

You can use the % or Moduolo to only count the odd numbers by using

CONTINUE -is used to skip a portion and start the loop back over again.
        where break is used to stop the loop all together.

        int sum = 0;

        for (int i = 100; i > 0; i--)
        {
            if(i % 2 == 0)
            {
                continue;
            }

            sum += i;
        }

FOR EACH statement

        if you have a collection of data to process, for each is the best to use.
        You CANNOT modify any items in the collection, read only.
        start with your array
        int [] blahblah = {100, 25}; //int [] = an array
            foreach(int newvariable in blahblah) {

            }

CONVERT.To -displays a list of options

        typically use ToInt32 to convert a string to integers
        or can use ToDecimal

        .ToString method will change to a string.

    All are within the Object class and can be converted.

TRYPARSE

    you put what you want to try and convert to in front of the TryParse
    for example int as integer below.

    we add the bool CanConvert in order to check if it will be true or false and 
    do an if else statement to confirm which one.

bool CanConvert = int.TryParse(strNumber, out anInt)
        if(!CanConvert) {
            Console.WriteLine("The string could not be converted!");
            } 
            else
            {
            Console.WriteLine($"The converted value is {anInt}");
            }

 Try Catch block

        private static void method3()
            {
                int n = 0;
                int d = 0;
                try
                {
                    int x = n / d;
                }  
                catch (DivideByZeroException)
                 {
                     Console.WriteLine("We attempted to divide by zero. variable d cannot be zero.");
                 }
                catch (Exception)
                {
                    Console.WriteLine("An exception occured!");
                }
                Console.WriteLine("End of Method3!");

You can catch an exception in the main method that calls all other methods. 
Since it flows upwards if there is no catch in place.
If you do not catch an exception the program could blow up and not work.

In CAPSTONE project -create an exception will allow your other

You can hover over and see the exceptions that might fire.  
You cannot catch all of the exceptions when having users input things.
Check what the user inputs, dont assume its the correct data.

Stack Overflow
Max Integer and add 1 to it, it flips to negative.
  anything with 0 before it is positive number.  1 before it is negative.
  If you expect to see postive, but starts showing negative that means 
  you overflowed it.

Binary
1-digit:    0 or 1
2-digits:   00(0), 01(1), 10(2), 11(3)  11 = 1 * 2^1 + 1 * 2^0  //anything to zero power is 1 so this is 2+1=3.
            1|00 //only 2 digits, so 100 becomes 1|00 back to 0 but the preceeding 1 flips to negative number.

